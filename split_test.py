import numpy as np

table = [[[[43, 131, 63, 141, "Name"]], [[195, 131, 209, 141, "Age"]], [[387, 131, 414, 141, "Position"]]], [[[43, 143, 71, 156, "Jeffrey"], [74, 143, 81, 156, "P."], [83, 143, 108, 156, "Bezos"], [43, 156, 71, 169, "Jeffrey"], [74, 156, 85, 169, "M."], [88, 156, 129, 169, "Blackburn"]], [[197, 143, 207, 156, "53"], [197, 156, 207, 169, "47"]], [[252, 143, 291, 156, "President,"], [294, 143, 316, 156, "Chief"], [319, 143, 359, 156, "Executive"], [361, 143, 392, 156, "Officer,"], [394, 143, 409, 156, "and"], [411, 143, 451, 156, "Chairman"], [453, 143, 461, 156, "of"], [464, 143, 476, 156, "the"], [479, 143, 503, 156, "Board"], [252, 156, 278, 169, "Senior"], [280, 156, 298, 169, "Vice"], [301, 156, 341, 169, "President,"], [343, 156, 379, 169, "Business"], [381, 156, 435, 169, "Development"]]], [[[43, 170, 76, 183, "Andrew"], [78, 170, 87, 183, "R."], [90, 170, 111, 183, "Jassy"]], [[197, 170, 207, 183, "49"]], [[252, 170, 272, 183, "CEO"], [274, 170, 307, 183, "Amazon"], [310, 170, 328, 183, "Web"], [330, 170, 364, 183, "Services"]]], [[[43, 184, 66, 197, "Brian"], [68, 184, 76, 197, "T."], [78, 184, 116, 197, "Olsavsky"]], [[197, 184, 207, 197, "53"]], [[251, 184, 278, 197, "Senior"], [280, 184, 298, 197, "Vice"], [301, 184, 338, 197, "President"], [340, 184, 355, 197, "and"], [357, 184, 380, 197, "Chief"], [382, 184, 419, 197, "Financial"], [422, 184, 451, 197, "Officer"]]], [[[43, 198, 73, 211, "Shelley"], [76, 198, 85, 211, "L."], [87, 198, 125, 211, "Reynolds"]], [[197, 198, 207, 211, "52"]], [[251, 198, 270, 211, "Vice"], [272, 198, 312, 211, "President,"], [314, 198, 359, 211, "Worldwide"], [361, 198, 404, 211, "Controller,"], [407, 198, 421, 211, "and"], [424, 198, 460, 211, "Principal"], [462, 198, 508, 211, "Accounting"], [511, 198, 539, 211, "Officer"]]], [[[43, 212, 71, 225, "Jeffrey"], [73, 212, 83, 225, "A."], [85, 212, 109, 225, "Wilke"]], [[197, 212, 207, 225, "50"]], [[252, 212, 272, 225, "CEO"], [274, 212, 318, 225, "Worldwide"], [321, 212, 362, 225, "Consumer"]]], [[[43, 226, 68, 239, "David"], [70, 226, 80, 239, "A."], [82, 226, 119, 239, "Zapolsky"]], [[197, 226, 207, 239, "53"]], [[252, 226, 278, 239, "Senior"], [280, 226, 298, 239, "Vice"], [301, 226, 341, 239, "President,"], [343, 226, 375, 239, "General"], [377, 226, 413, 239, "Counsel,"], [415, 226, 430, 239, "and"], [432, 226, 470, 239, "Secretary"]]]]
table = [[[], [], [[411, 157, 428, 167, "High"]], [], [[502, 157, 517, 167, "Low"]]], [[[43, 169, 62, 182, "Year"], [65, 169, 88, 182, "ended"], [91, 169, 132, 182, "December"], [134, 169, 147, 182, "31,"], [149, 169, 169, 182, "2015"], [61, 182, 80, 195, "First"], [82, 182, 113, 195, "Quarter"]], [[376, 182, 381, 195, "$"]], [[431, 182, 459, 195, "389.37"]], [[466, 182, 471, 195, "$"]], [[521, 182, 549, 195, "285.25"]]], [[[61, 196, 91, 209, "Second"], [93, 196, 124, 209, "Quarter"]], [], [[431, 196, 459, 209, "452.65"]], [], [[521, 196, 549, 209, "368.34"]]], [[[61, 210, 84, 223, "Third"], [86, 210, 117, 223, "Quarter"]], [], [[431, 210, 459, 223, "580.57"]], [], [[521, 210, 549, 223, "425.57"]]], [[[61, 224, 88, 237, "Fourth"], [91, 224, 121, 237, "Quarter"]], [], [[431, 224, 459, 237, "696.44"]], [], [[521, 224, 549, 237, "506.00"]]], [[[43, 238, 62, 251, "Year"], [64, 238, 88, 251, "ended"], [91, 238, 132, 251, "December"], [134, 238, 147, 251, "31,"], [149, 238, 169, 251, "2016"]], [], [], [], []], [[[61, 252, 80, 265, "First"], [82, 252, 113, 265, "Quarter"]], [[376, 252, 381, 265, "$"]], [[431, 252, 459, 265, "657.72"]], [[466, 252, 471, 265, "$"]], [[521, 252, 549, 265, "474.00"]]], [[[61, 266, 91, 279, "Second"], [93, 266, 124, 279, "Quarter"]], [], [[431, 266, 459, 279, "731.50"]], [], [[521, 266, 549, 279, "585.25"]]], [[[61, 280, 84, 293, "Third"], [86, 280, 117, 293, "Quarter"]], [], [[431, 280, 459, 293, "839.95"]], [], [[521, 280, 549, 293, "716.54"]]], [[[61, 294, 88, 307, "Fourth"], [91, 294, 121, 307, "Quarter"]], [], [[431, 294, 459, 307, "847.21"]], [], [[521, 294, 549, 307, "710.10"]]]]
table = [[[[144, 368, 194, 383, "Inspection"], [197, 368, 223, 383, "Date:"], [144, 383, 167, 398, "Date"], [170, 383, 179, 398, "of"], [182, 383, 218, 398, "Report:"]], [[288, 368, 309, 383, "20th"], [312, 368, 354, 383, "January,"], [357, 368, 382, 383, "2018"], [288, 383, 309, 398, "10th"], [312, 383, 366, 398, "December,"], [369, 383, 393, 398, "2017"]]], [[[102, 432, 147, 448, "Property"], [150, 432, 183, 448, "Name:"]], [[288, 433, 311, 448, "ABC"], [314, 433, 360, 448, "Elements"]]], [[[102, 456, 145, 472, "Address"]], [[288, 457, 307, 472, "123"], [310, 457, 317, 472, "E"], [320, 457, 362, 472, "Random"], [365, 457, 379, 472, "Rd"], [288, 471, 326, 486, "Tempe,"], [329, 471, 369, 486, "Arizona,"], [288, 484, 314, 499, "USA,"], [317, 484, 348, 499, "85287"]]], [[[102, 507, 122, 523, "Site"], [125, 507, 200, 523, "Improvements"], [120, 522, 126, 537, "\u25cf"], [138, 522, 159, 537, "Size"], [120, 535, 126, 550, "\u25cf"], [138, 535, 196, 550, "Topography"], [120, 549, 126, 564, "\u25cf"], [138, 549, 165, 564, "Flood"], [168, 549, 189, 564, "Map"]], [[288, 522, 313, 537, "2500"], [316, 522, 330, 537, "SF"], [288, 535, 315, 550, "Level"], [288, 549, 314, 564, "X500"]]], [[[102, 572, 147, 588, "Intended"], [150, 572, 175, 588, "User"]], [[288, 573, 307, 588, "The"], [310, 573, 352, 588, "intended"], [355, 573, 377, 588, "user"], [380, 573, 389, 588, "of"], [392, 573, 409, 588, "this"], [412, 573, 465, 588, "agreement"], [468, 573, 476, 588, "is"], [479, 573, 506, 588, "Mohit"], [288, 586, 317, 601, "Shah."], [320, 586, 326, 601, "It"], [329, 586, 337, 601, "is"], [340, 586, 349, 601, "to"], [352, 586, 365, 601, "be"], [368, 586, 392, 601, "used"], [395, 586, 404, 601, "to"], [407, 586, 458, 601, "appraising"], [461, 586, 501, 601, "property"], [504, 586, 531, 601, "rights"], [288, 600, 297, 615, "of"], [300, 600, 316, 615, "the"], [319, 600, 348, 615, "client."]]], [[[72, 648, 119, 663, "Prepared"], [122, 648, 136, 663, "By"], [72, 663, 98, 678, "Mohit"], [101, 663, 127, 678, "Shah"], [72, 678, 134, 693, "Ahmedabad,"], [72, 693, 98, 708, "India,"], [101, 693, 138, 708, "380051"]], [[432, 648, 489, 663, "Authorized"], [492, 648, 529, 663, "Person"], [432, 663, 454, 678, "Virat"], [457, 663, 482, 678, "Kohli"], [432, 678, 460, 693, "Delhi,"], [463, 678, 490, 693, "India,"], [432, 693, 462, 708, "90123"]]], [[], [[527, 723, 539, 738, "15"]]]]
num_rows = len(table)
num_cols = len(table[0])
print (num_rows, num_cols)

def is_y_similar(ry0, ry1, y0, y1):
    if np.abs(ry0 - y0) < 5 and np.abs(ry1 - y1) < 5:
        return True
    return False

def get_lines(cell):
    unique_y = {}
    for word in cell:
        if len(word[-1]) > 0:
            unique_y[(word[1], word[3])] = True
    C_inds = []
    lines = []
    for y in unique_y.keys():
        ref_y0 = y[0]
        ref_y1 = y[1]
        C = []
        inds = []
        for idx, c in enumerate(cell):
            if idx not in inds:
                y0 = c[1]
                y1 = c[3]
                if is_y_similar(ref_y0, ref_y1, y0, y1):
                    C.append(c)
                    inds.append(idx)
        C = sorted(C, key=lambda x: (x[1], x[0]))
        inds = list(set(inds))
        C_inds.extend(inds)
        lines.append(C)
    return lines


new_table = []
for row in table:
    num_lines = []
    cols = []
    for cell in row:
        lines = get_lines(cell)
        cols.append(lines)
        num_lines.append(len(lines))
    s = set(num_lines)
    if 0 in s:
        s.remove(0)
    if len(s) == 1:
        if 1 in s:
            new_table.append(row)
            continue
        else:
            r = list(s)[0]
            for x in range(r):
                new_row = []
                for cell in cols:
                    l = cell[x]
                    new_row.append(l)
                new_table.append(new_row)
            continue
    else:        
        max_lines_idx = np.argsort(num_lines)[-1]
        ref = cols[max_lines_idx]
        # print (ref)
        prev_rr = False
        p_rr = [[] for _ in range(len(cols))]
        rr = [[] for _ in range(len(cols))]
        for line in ref:
            y0 = min([w[1] for w in line])
            y1 = max([w[3] for w in line])
            rr[max_lines_idx].extend(line)
            for ii, col in enumerate(cols):
                if ii == max_lines_idx: continue
                for line2 in col:
                    yy0 = min([w[1] for w in line2])
                    yy1 = max([w[3] for w in line2])
                    if is_y_similar(y0, y1, yy0, yy1):
                        # print (line, line2)
                        rr[ii].extend(line2)
            ll = [float(len(xx) > 0) for xx in rr]
            m = np.mean(ll)
            if m <= 0.5:
                if prev_rr is False:
                    new_table.append(rr)
                    prev_rr = False
                    p_rr = [[] for _ in range(len(cols))]
                    rr = [[] for _ in range(len(cols))]
                else:
                    for j, tmp in enumerate(rr):
                        p_rr[j].extend(tmp)
                    prev_rr = True
                    rr = [[] for _ in range(len(cols))]
            else:
                if prev_rr is not False:
                    new_table.append(p_rr)
                p_rr = rr
                prev_rr = True
                rr = [[] for _ in range(len(cols))]
        if prev_rr is not False:
            new_table.append(p_rr)
print (new_table)